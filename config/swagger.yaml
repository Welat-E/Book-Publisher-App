basePath: /
host: book-publisher-app.onrender.com
info:
  description: A web service designed for publishers to manage authors and their books.
    Each book entry includes details such as pages, chapters, release date, and more.
    Additionally, publishers can track publication-specific information, including
    price, country, units sold, language, and other relevant data.
  title: Publisher Book App
  version: 1.0.0
paths:
  /author:
    get:
      description: Fetches all authors. Requires JWT authentication.
      responses:
        200:
          description: List of authors
      security:
      - JWT: []
      summary: Get authors
      tags:
      - author
    post:
      description: Adds a new author to the database. Requires JWT authentication.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          properties:
            author_image:
              type: string
            birth_date:
              type: string
            name:
              type: string
          type: object
      responses:
        200:
          description: Author successfully created
      security:
      - JWT: []
      summary: Create new author
      tags:
      - author
  /author/{id}:
    get:
      description: Fetches details of a single author based on ID.
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      security:
      - JWT: []
      responses:
        200:
          description: Author details
        404:
          description: Author not found
      summary: Get author by ID
      tags:
      - author
  /book:
    delete:
      description: Deletes a selected book based on book_id.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          properties:
            book_id:
              type: integer
          type: object
      responses:
        200:
          description: Book deleted successfully
        404:
          description: Book not found
      summary: Delete a book
      tags:
      - book
    get:
      description: Fetches information about all books.
      responses:
        200:
          description: List of books
      security:
      - JWT: []
      summary: Get all books
      tags:
      - book
    post:
      description: Creates a new book entry.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          properties:
            chapters:
              type: integer
            cover_image:
              type: string
            pages:
              type: integer
            release_date:
              type: string
            user_id:
              type: integer
          type: object
      responses:
        201:
          description: Book successfully added
      summary: Add a new book
      tags:
      - book
  /book/{book_id}:
    put:
      description: Edit a selected book based on book_id.
      parameters:
      - in: path
        name: book_id
        required: true
        type: integer
      - in: body
        name: body
        required: true
        schema:
          properties:
            chapters:
              type: integer
            cover_image:
              type: string
            pages:
              type: integer
            release_date:
              type: string
          type: object
      responses:
        200:
          description: Book updated successfully
        404:
          description: Book not found
      summary: Edit book details
      tags:
      - book
  /login:
    post:
      description: Logs in a user and returns a JWT token.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          properties:
            email:
              type: string
            password:
              type: string
          type: object
      responses:
        200:
          description: Successful login
        401:
          description: Invalid email or password
      summary: User login
      tags:
      - auth
  /publication_details:
    get:
      description: Fetches detailed information about a selected book related to sales,
        price, etc.
      parameters:
      - in: query
        name: author_id
        required: false
        type: integer
      - in: query
        name: book_id
        required: true
        type: integer
      security:
      - JWT: []
      responses:
        200:
          description: Publication details
        404:
          description: Publication details not found
      summary: Get publication details
      tags:
      - publication details
  /register:
    post:
      description: Creates a new user with hashed password.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          properties:
            email:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            password:
              type: string
          type: object
      responses:
        200:
          description: User successfully registered
        500:
          description: Error occurred during registration
      summary: Register a new user
      tags:
      - auth
  /users:
    get:
      description: Fetches all users. Requires JWT authentication.
      responses:
        200:
          description: List of users
      security:
      - JWT: []
      summary: Get all users
      tags:
      - user
  /users/{user_id}:
    delete:
      description: Deletes a user based on user_id. Requires JWT authentication.
      parameters:
      - in: path
        name: user_id
        required: true
        type: integer
      responses:
        200:
          description: User deleted
        404:
          description: User not found
      security:
      - JWT: []
      summary: Delete user
      tags:
      - user
schemes:
- https
securityDefinitions:
  JWT:
    description: 'JWT Authorization header using the Bearer scheme. Example: ''Authorization:
      Bearer {token}'''
    in: header
    name: Authorization
    type: apiKey
swagger: '2.0'
